{"version":3,"sources":["Funhaus_circle_logo.svg","components/YouTubeFrame.js","components/AuthorInfoDrawer.js","components/SiteInfoDrawer.js","components/DisclaimerBar.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","YouTubeFrame","videoId","getVideoId","className","YouTube","opts","height","width","playerVars","autoplay","onEnd","useStyles","makeStyles","list","fullList","paddingTop","paddingBottom","display","justifyContent","backgroundColor","AuthorInfoDrawer","side","classes","React","useState","bottom","state","setState","toggleDrawer","open","event","type","key","Button","variant","size","onClick","Drawer","anchor","onClose","role","onKeyDown","Paper","href","target","rel","src","logo","alt","SiteInfoDrawer","Alert","props","elevation","theme","root","marginTop","spacing","DisclaimerBar","setOpen","useEffect","handleClose","reason","Snackbar","severity","getRandomVideo","obj","keys","Object","length","Math","random","App","setVideoId","videos","storedVideos","sessionStorage","getItem","video","JSON","parse","console","log","firebase","ref","once","then","snapshot","val","setItem","stringify","apiKey","authDomain","databaseURL","storageBucket","color","endIcon","Icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bddc5024.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Funhaus_circle_logo.fd81c1f7.svg\";","import React from 'react';\r\nimport YouTube from 'react-youtube';\r\n\r\nfunction YouTubeFrame({ videoId, getVideoId } ) {\r\n  const opts = {\r\n    height: '390',\r\n    width: '640',\r\n    playerVars: { // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"YouTubeFrame\">\r\n        <YouTube\r\n          videoId={videoId}\r\n          opts={opts}\r\n          onEnd={getVideoId}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YouTubeFrame;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport logo from '../Funhaus_circle_logo.svg';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    paddingTop: '24px',\r\n    paddingBottom: '24px',\r\n    width: 'auto',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#282c34',\r\n  },\r\n});\r\n\r\nexport default function AuthorInfoDrawer() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    bottom: false,\r\n  });\r\n\r\n  const toggleDrawer = (side, open) => event => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [side]: open });\r\n  };\r\n\r\n  const fullList = side => (\r\n    <div\r\n      className={classes.fullList}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(side, false)}\r\n      onKeyDown={toggleDrawer(side, false)}\r\n    >\r\n      <Paper className=\"info-paper\">\r\n        <div className=\"info-content\">\r\n          <h4>A little bit about me:</h4>\r\n          <p>My name is Seth Rauch and I'm a professional web developer living in Colorado. I've been a Funhaus fan for almost 3 years now.\r\n            I first found their content on Reddit and became an instant fan and now I'm a RoosterTeeth First member and watch their content daily.\r\n            This is me trying to give back to Funhaus and this fanbase/community since you all are so great.</p>\r\n          <p>Contact: rauchseth@gmail.com</p>\r\n\r\n          <h4>WHY?</h4>\r\n          <p>I always loved watching FunhausTV on YouTube to catch random videos I'd probably never find on my own(They seriously have <b>~2700</b> videos on YouTube!).\r\n            I've been sad to see the issues arise with the FunhausTV stream so I've decided to take it upon myself to create somthing similar - minus InsideGaming.\r\n            I was suprised to find you can't just shuffle a YouTube channel so I decided to create this website which essentially replaces FunhausTV for me.\r\n            I cast a tab to my Chromecast and let it run through random video after random video. See \"How this do things?\" button for implementation information and about any future plans for this site.</p>\r\n        </div>\r\n        <a\r\n            className=\"App-link\"\r\n            href=\"https://www.youtube.com/channel/UCboMX_UNgaPBsUOIgasn3-Q/featured\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </a>\r\n      </Paper>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"info-drawer\">\r\n      <Button variant=\"outlined\" size=\"large\" onClick={toggleDrawer('bottom', true)}>Who made this?</Button>\r\n      <Drawer className=\"info-open\" anchor=\"bottom\" open={state.bottom} onClose={toggleDrawer('bottom', false)}>\r\n        {fullList('bottom')}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport logo from '../Funhaus_circle_logo.svg';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    paddingTop: '24px',\r\n    paddingBottom: '24px',\r\n    width: 'auto',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#282c34',\r\n  },\r\n});\r\n\r\nexport default function SiteInfoDrawer() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    bottom: false,\r\n  });\r\n\r\n  const toggleDrawer = (side, open) => event => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [side]: open });\r\n  };\r\n\r\n  const fullList = side => (\r\n    <div\r\n      className={classes.fullList}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(side, false)}\r\n      onKeyDown={toggleDrawer(side, false)}\r\n    >\r\n      <Paper className=\"info-paper\">\r\n        <div className=\"info-content\">\r\n          <h3>How this do things?</h3>\r\n          <p>This site was built in ReactJS using the boilerplate <a href=\"https://github.com/facebook/create-react-app\">\r\n              create-react-app</a> repo and hosted on Github pages. I initally was going to use the <a href=\"https://developers.google.com/youtube/v3\">YouTube Data API</a> to randomly grab a Funhaus videoId but YouTube limits the amount\r\n              of calls you can make per day so I nixed that plan. I decided to use the same YouTubeAPI to scrape all of\r\n              the Funhaus videoIds (There are currently <b>~2700</b> videos on their YouTube channel) and store them in a <a href=\"https://firebase.google.com/\">Firebase database</a>.</p>\r\n              <p>This app randomly grabs a videoId from said database each time this site loads and each time a video ends. I plan to update this database as they add more content to their YouTube channel - maybe biweekly.\r\n              I plan to keep this site up to date as long as FunhausTV does not exist on YouTube. I have ideas/plans to eventually move this logic all to the server side so there is one stream so \r\n              people can comment and watch the same stream in real-time - This is all TBD.</p>\r\n        </div>\r\n        <a\r\n            className=\"App-link\"\r\n            href=\"https://www.youtube.com/channel/UCboMX_UNgaPBsUOIgasn3-Q/featured\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </a>\r\n      </Paper>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"info-drawer\">\r\n      <Button variant=\"outlined\" size=\"large\" onClick={toggleDrawer('bottom', true)}>How this do things?</Button>\r\n      <Drawer className=\"info-open\" anchor=\"bottom\" open={state.bottom} onClose={toggleDrawer('bottom', false)}>\r\n        {fullList('bottom')}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function DisclaimerBar() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setOpen(true);\r\n  }, []);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar open={open} onClose={handleClose}>\r\n        <Alert className=\"disclaimer-bar\" onClose={handleClose} severity=\"info\">\r\n          <h4>Disclaimer:</h4>\r\n          <p>I am in no way affliated with Funhaus or RoosterTeeth. I do not gain any monetary value or profit from this website.\r\n             I am just a huge fan trying to help out the Funhaus community. I will take this site down if anyone affliated with\r\n             Funhaus or RoosterTeeth asks me to take it down.</p>\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n","function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n  }\r\n\r\nexport function getRandomDate() {\r\n    const todaysYear = new Date().getFullYear() + 1;\r\n    const randomYear = getRandomInt(2015, todaysYear);\r\n    const randomDay = getRandomInt(1, 29);\r\n    const randomMonth = getRandomInt(1, 12);\r\n\r\n    return `${randomYear}-${randomMonth}-${randomDay}`;\r\n}\r\n\r\n// export function getRandomVideoId(items) {\r\n//     const randomNum = getRandomInt(0, 50);\r\n//     return items[randomNum].id.videoId;\r\n// }\r\n\r\nexport function getRandomVideo(obj) {\r\n    const keys = Object.keys(obj);\r\n    return obj[keys[ keys.length * Math.random() << 0]];\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n// Firebase App (the core Firebase SDK) is always required and\r\n// must be listed before other Firebase SDKs\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport './App.css';\r\nimport YouTubeFrame from './components/YouTubeFrame';\r\nimport AuthorInfoDrawer from './components/AuthorInfoDrawer';\r\nimport SiteInfoDrawer from './components/SiteInfoDrawer';\r\nimport DisclaimerBar from './components/DisclaimerBar';\r\n\r\nimport { getRandomVideo } from './utils';\r\n\r\nfunction App() {\r\n  // Function to scrape YouTube playlist and store videoIds\r\n  // function saveVideoIds(nextPageToken = null) {\r\n  //   const API_KEY = '';\r\n\r\n  //   // playlistItem url\r\n  //   let url;\r\n  //   if (nextPageToken) {\r\n  //     url = `https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50&pageToken=${nextPageToken}&playlistId=UUboMX_UNgaPBsUOIgasn3-Q&key=${API_KEY}`;\r\n  //   } else {\r\n  //     url = `https://www.googleapis.com/youtube/v3/playlistItems?part=contentDetails&maxResults=50&playlistId=UUboMX_UNgaPBsUOIgasn3-Q&key=${API_KEY}`;\r\n  //   }\r\n  //   debugger;\r\n  //   fetch(url, { \r\n  //     method: 'GET', \r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //     },\r\n  //   })\r\n  //   .then((response) => response.json())\r\n  //   .then((data) => {\r\n  //     console.log('Success:', data);\r\n\r\n  //     data.items.forEach(item => {\r\n  //       // Get a key for a new Post.\r\n  //       const newVidKey = firebase.database().ref().child('videos').push().key;\r\n  //       debugger;\r\n  //       firebase.database().ref('videos/' + newVidKey).set({\r\n  //         videoId: item.contentDetails.videoId\r\n  //       });\r\n  //     })\r\n\r\n  //     debugger;\r\n  //     const pageToken = data.nextPageToken;\r\n  //     if (pageToken) saveVideoIds(pageToken);\r\n  //   })\r\n  //   .catch((error) => {\r\n  //     console.error('Error:', error);\r\n  //   });\r\n  // }\r\n\r\n  const [videoId, setVideoId]=useState(0) //initialize your state here\r\n\r\n  function getVideoId() {\r\n    let videos;\r\n    // Get saved data from sessionStorage\r\n    const storedVideos = sessionStorage.getItem('storedVideos');\r\n    debugger;\r\n    if (!storedVideos) {\r\n      firebase.database().ref('/videos/').once('value').then(function(snapshot) {\r\n        videos = snapshot.val();\r\n\r\n        // Save data to sessionStorage\r\n        sessionStorage.setItem('storedVideos', JSON.stringify(videos));\r\n\r\n        const video = getRandomVideo(videos);\r\n        setVideoId(video.videoId);\r\n        console.log(video)\r\n      });\r\n    } else {\r\n      const video = getRandomVideo(JSON.parse(storedVideos));\r\n      setVideoId(video.videoId);\r\n      console.log(video)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Set the configuration for your app\r\n    // TODO: Replace with your project's config object\r\n    const config = {\r\n      apiKey: \"AIzaSyANrcGcG1YM9pzL-c5r4DgaRw-sYQkEkSc\",\r\n      authDomain: \"funhaustv-270301.firebaseapp.com\",\r\n      databaseURL: \"https://funhaustv-270301.firebaseio.com/\",\r\n      storageBucket: \"bucket.appspot.com\"\r\n    };\r\n    firebase.initializeApp(config);    \r\n    // saveVideoIds();\r\n\r\n    getVideoId(setVideoId);\r\n  }, []);\r\n\r\n  console.log(\"App videoId:\", videoId);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h2>FunhausTV</h2>\r\n        <YouTubeFrame videoId={videoId} getVideoId={getVideoId} />\r\n        <div className=\"info-buttons\">\r\n          <AuthorInfoDrawer />\r\n          <Button\r\n            className=\"skip-button\"\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n            size=\"large\"\r\n            onClick={getVideoId}\r\n            endIcon={<Icon>skip_next</Icon>}\r\n          >\r\n            Skip\r\n          </Button>\r\n          <SiteInfoDrawer />\r\n        </div>\r\n      </header>\r\n      <DisclaimerBar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}