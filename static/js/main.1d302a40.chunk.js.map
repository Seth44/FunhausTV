{"version":3,"sources":["Funhaus_circle_logo.svg","YouTubeFrame.js","InfoDrawer.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","YouTubeFrame","videoId","getVideoId","className","YouTube","opts","height","width","playerVars","autoplay","onEnd","useStyles","makeStyles","list","fullList","InfoDrawer","side","classes","React","useState","bottom","state","setState","toggleDrawer","open","event","type","key","Button","variant","onClick","Drawer","anchor","onClose","role","onKeyDown","getRandomInt","min","max","Math","ceil","floor","random","App","setVideoId","randomDate","randomYear","Date","getFullYear","randomDay","randomMonth","getRandomDate","console","log","url","fetch","method","headers","then","response","json","data","randomVideoId","items","id","catch","error","useEffect","color","size","endIcon","Icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,iD,sJCsB5BC,MAnBf,YAAiD,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,WAQ/B,OACE,yBAAKC,UAAU,gBACX,kBAACC,EAAA,EAAD,CACEH,QAASA,EACTI,KAXK,CACXC,OAAQ,MACRC,MAAO,MACPC,WAAY,CACVC,SAAU,IAQNC,MAAOR,M,gCCXXS,EAAYC,YAAW,CAC3BC,KAAM,CACJN,MAAO,KAETO,SAAU,CACRP,MAAO,UAII,SAASQ,IACtB,IAaiBC,EAbXC,EAAUN,IADmB,EAETO,IAAMC,SAAS,CACvCC,QAAQ,IAHyB,mBAE5BC,EAF4B,KAErBC,EAFqB,KAM7BC,EAAe,SAACP,EAAMQ,GAAP,OAAgB,SAAAC,IAChB,YAAfA,EAAMC,MAAqC,QAAdD,EAAME,KAA+B,UAAdF,EAAME,MAI9DL,EAAS,eAAKD,EAAN,eAAcL,EAAOQ,OAc/B,OACE,yBAAKrB,UAAU,eACb,kBAACyB,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASP,EAAa,UAAU,IAA3D,eACA,kBAACQ,EAAA,EAAD,CAAQC,OAAO,SAASR,KAAMH,EAAMD,OAAQa,QAASV,EAAa,UAAU,KAd/DP,EAeD,SAdd,yBACEb,UAAWc,EAAQH,SACnBoB,KAAK,eACLJ,QAASP,EAAaP,GAAM,GAC5BmB,UAAWZ,EAAaP,GAAM,QCjCpC,SAASoB,EAAaC,EAAKC,GAGvB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,IAAQA,ECoEtCM,MA7Df,WAAgB,IAAD,EACexB,mBAAS,GADxB,mBACNlB,EADM,KACG2C,EADH,KAGb,SAAS1C,IACP,IACM2C,EDTH,WACH,IACMC,EAAaV,EAAa,MADb,IAAIW,MAAOC,cAAgB,GAExCC,EAAYb,EAAa,EAAG,IAC5Bc,EAAcd,EAAa,EAAG,IAEpC,MAAM,GAAN,OAAUU,EAAV,YAAwBI,EAAxB,YAAuCD,GCGpBE,GACnBC,QAAQC,IAAIR,GACZ,IAAMS,EAAG,gJAA4IT,EAA5I,yCAHO,2CAIhBU,MAAMD,EAAK,CACTE,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGnBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLT,QAAQC,IAAI,WAAYQ,GACxB,IAAMC,EAAiCD,EAAKE,MDX5B3B,EAAa,EAAG,KACV4B,GAAG/D,QCWzB2C,EAAWkB,GACXV,QAAQC,IAAIS,MAEbG,OAAM,SAACC,GACNd,QAAQc,MAAM,SAAUA,MAU5B,OANAC,qBAAU,WACRjE,MACC,IAEHkD,QAAQC,IAAI,eAAgBpD,GAG1B,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,yCASA,kBAAC,EAAD,CAAcF,QAASA,EAASC,WAAYA,IAC5C,kBAAC0B,EAAA,EAAD,CACEzB,UAAU,cACV0B,QAAQ,YACRuC,MAAM,UACNC,KAAK,QACLvC,QAAS5B,EACToE,QAAS,kBAACC,EAAA,EAAD,mBANX,QAUA,kBAACxD,EAAD,SCrDYyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMoB,c","file":"static/js/main.1d302a40.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Funhaus_circle_logo.b13292aa.svg\";","import React from 'react';\r\nimport YouTube from 'react-youtube';\r\n\r\nfunction YouTubeFrame({ videoId, getVideoId } ) {\r\n  const opts = {\r\n    height: '390',\r\n    width: '640',\r\n    playerVars: { // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"YouTubeFrame\">\r\n        <YouTube\r\n          videoId={videoId}\r\n          opts={opts}\r\n          onEnd={getVideoId}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default YouTubeFrame;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nexport default function InfoDrawer() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    bottom: false,\r\n  });\r\n\r\n  const toggleDrawer = (side, open) => event => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [side]: open });\r\n  };\r\n\r\n  const fullList = side => (\r\n    <div\r\n      className={classes.fullList}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(side, false)}\r\n      onKeyDown={toggleDrawer(side, false)}\r\n    >\r\n\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"info-drawer\">\r\n      <Button variant=\"outlined\" onClick={toggleDrawer('bottom', true)}>Author Info</Button>\r\n      <Drawer anchor=\"bottom\" open={state.bottom} onClose={toggleDrawer('bottom', false)}>\r\n        {fullList('bottom')}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n  }\r\n\r\nexport function getRandomDate() {\r\n    const todaysYear = new Date().getFullYear() + 1;\r\n    const randomYear = getRandomInt(2015, todaysYear);\r\n    const randomDay = getRandomInt(1, 29);\r\n    const randomMonth = getRandomInt(1, 12);\r\n\r\n    return `${randomYear}-${randomMonth}-${randomDay}`;\r\n}\r\n\r\nexport function getRandomVideoId(items) {\r\n    const randomNum = getRandomInt(0, 50);\r\n    return items[randomNum].id.videoId;\r\n}","import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport logo from './Funhaus_circle_logo.svg';\nimport './App.css';\nimport YouTubeFrame from './YouTubeFrame';\nimport InfoDrawer from './InfoDrawer';\n\nimport { getRandomDate, getRandomVideoId } from './utils';\n\nfunction App() {\n  const [videoId, setVideoId]=useState(0) //initialize your state here\n\n  function getVideoId() {\n    const API_KEY = 'AIzaSyCohx22ge29KSVrGwayOszC21PomdrJ1V8';\n    const randomDate = getRandomDate();\n    console.log(randomDate);\n    const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=UCboMX_UNgaPBsUOIgasn3-Q&maxResults=50&order=date&publishedBefore=${randomDate}T00%3A00%3A00Z&type=video&key=${API_KEY}`;\n    fetch(url, { \n      method: 'GET', \n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n    .then((response) => response.json())\n    .then((data) => {\n      console.log('Success:', data);\n      const randomVideoId = getRandomVideoId(data.items);\n      setVideoId(randomVideoId);\n      console.log(randomVideoId);\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n    });\n  }\n\n  useEffect(() => {\n    getVideoId(setVideoId)\n  }, []);\n\n  console.log(\"App videoId:\", videoId);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>FunhausTV</h2>\n        {/* <a\n            className=\"App-link\"\n            href=\"https://www.youtube.com/channel/UCboMX_UNgaPBsUOIgasn3-Q/featured\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </a> */}\n        <YouTubeFrame videoId={videoId} getVideoId={getVideoId} />\n        <Button\n          className=\"skip-button\"\n          variant=\"contained\"\n          color=\"default\"\n          size=\"large\"\n          onClick={getVideoId}\n          endIcon={<Icon>skip_next</Icon>}\n        >\n          Skip\n        </Button>\n        <InfoDrawer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}